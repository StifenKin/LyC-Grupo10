package lyc.compiler;

import java_cup.runtime.*;
import java.util.Set;
import java.util.HashSet;
import lyc.compiler.table.*;
import java.util.HashMap;
import lyc.compiler.model.InvalidDateFormat;
import lyc.compiler.model.DuplicatedIdentifier;

class Parser;

action code {:
    HashMap<String, SymbolEntry> symbolTable = SymbolTableManager.symbolTable;
    Set<String> idList = new HashSet<>();
    DataType dataType;
:}


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal REST;
terminal MAYOR;
terminal LOWER;
terminal MAYOR_I;
terminal LOWER_I;
terminal EQUAL;
terminal NOT_EQUAL;
terminal AND_COND;
terminal OR_COND;
terminal NOT_COND;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COMMA;
terminal SEMI_COLON;
terminal DOT;
terminal DOUBLE_DOT;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal BOOLEAN_CONSTANT;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal WRITE;
terminal READ;
terminal String IDENTIFIER;
terminal INIT;
terminal ISZERO;
terminal CONVDATE;
terminal DATECONVERTED;
terminal DATE_LITERAL;

// Non Terminals
non terminal program;
non terminal block;
non terminal sentence;
non terminal var_declaration;
non terminal var_sencente_dec;
non terminal data_type;
non terminal id_list;
non terminal id_item;
non terminal decision;
non terminal condition;
non terminal comparison;
non terminal comparator;
non terminal iterator;
non terminal assignment;
non terminal s_write;
non terminal s_read;
non terminal write_param;
non terminal read_param;
non terminal expression;
non terminal term;
non terminal factor;
non terminal is_zero;
non terminal conv_date;
non terminal c_list;
non terminal list;
non terminal sep;
non terminal if_head;
non terminal else_head;
non terminal opt_block;
non terminal it_head;


// Start Symbol Definition
start with program;

program   ::= opt_block {: System.out.println("Compilation Ok"); :};

//    program ::= block {: System.out.println("Compilation Ok"); :}
//            | /* Empty */   {: System.out.println("Archivo vacío -> Compilation Ok"); :} ; 

opt_block ::= block
            | /* empty */; //Uso de LAMBDA.

sep ::= {: System.out.println("----------------Nueva Sentencia---------------"); :};

block ::= sentence
        | block sep sentence;


sentence ::=
       INIT {: System.out.println("Variable declaration starts"); :} OPEN_CURLY_BRACKET var_declaration CLOSE_CURLY_BRACKET {: System.out.println("Variable declaration ends"); :}
       |  decision
       |  iterator
       |  assignment
       |  s_write
       |  s_read
       |  is_zero
       |  conv_date;



var_declaration ::= var_sencente_dec var_declaration;
var_declaration ::= var_sencente_dec;
var_sencente_dec ::= id_list DOUBLE_DOT data_type {:
    for (String id : idList) {
        SymbolTableManager.setDataTypeInTable(id, dataType);  
    }

    idList.clear();
:};

data_type ::=
              INT {:
                System.out.println("Int data type");
                dataType = DataType.INTEGER_TYPE;
            :}
            | FLOAT {:
                System.out.println("Float data type");
                dataType = DataType.FLOAT_TYPE;
            :}
            | STRING {:
                System.out.println("String data type");
                dataType = DataType.STRING_TYPE;
            :}
            | DATECONVERTED {:
                System.out.println("DateConverted data type");
                dataType = DataType.STRING_TYPE;
            :};

id_list ::=
      id_item
    | id_list COMMA id_item
    ;


id_item ::= IDENTIFIER:id {:
    System.out.println("ID detected: " + id);
    if (!idList.add(id)) {
        throw new DuplicatedIdentifier("Identificador repetido en la misma declaración: " + id);
    }
    if (SymbolTableManager.existsInTable(id)) {
        throw new DuplicatedIdentifier("Identificador " + id + " ya declarado antes");
    }
    SymbolTableManager.insertInTable(new SymbolEntry(id));
:};



if_head ::= IF {: System.out.println("If statement"); :};

else_head ::= ELSE {: System.out.println("Else branch"); :};

decision ::= if_head OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET opt_block CLOSE_CURLY_BRACKET;
decision ::= if_head OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET opt_block CLOSE_CURLY_BRACKET 
                else_head OPEN_CURLY_BRACKET opt_block CLOSE_CURLY_BRACKET;


condition ::= is_zero;
condition ::= comparison AND_COND comparison {: System.out.println("And condition"); :};
condition ::= comparison OR_COND comparison {: System.out.println("Or condition"); :};
condition ::= comparison {: System.out.println("Condition = Comparison"); :};
condition ::= NOT_COND comparison {: System.out.println("Not condition"); :};
comparison ::= expression:e1 comparator:c expression:e2 {:
    System.out.println("Comparison detected: " + e1 + " " + c + " " + e2);
    RESULT = "(" + e1 + " " + c + " " + e2 + ")";
:};



comparator ::= MAYOR {: RESULT = ">"; :}
             | LOWER {: RESULT = "<"; :}
             | MAYOR_I {: RESULT = ">="; :}
             | LOWER_I {: RESULT = "<="; :}
             | EQUAL {: RESULT = "=="; :}
             | NOT_EQUAL {: RESULT = "!="; :}
             ;


it_head ::= WHILE {: System.out.println("While statement"); :};
iterator ::= it_head OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET opt_block CLOSE_CURLY_BRACKET ;

assignment ::=
    IDENTIFIER:id ASSIG expression:e
    {:
        System.out.println("Assignment detected");
        System.out.println(id + " := " + (e != null ? e : "ERROR"));
        RESULT = e != null ? e : "ERROR";
    :}
  | IDENTIFIER:id ASSIG STRING_CONSTANT:s
    {:  
        System.out.println("Assignment detected");
        System.out.println(id+ " = "+ s );
        RESULT = s;
    :}
  | IDENTIFIER:id ASSIG conv_date:cd
    {:  
        System.out.println("Assignment detected");
        System.out.println(id+ " = "+ cd );
        RESULT = cd;
    :}

;
expression ::= term:t {:
    RESULT = t;
:};

expression ::= expression:e PLUS term:t {:
    System.out.println("Suma detectada: " + e + " + " + t);
    RESULT = (e != null ? e : "ERROR") + " + " + (t != null ? t : "ERROR");
:};

expression ::= expression:e SUB term:t {:
    System.out.println("Resta detectada: " + e + " - " + t);
    RESULT = (e != null ? e : "ERROR") + " - " + (t != null ? t : "ERROR");
:};


term ::= factor:f {:
    RESULT = f;
:};

term ::= term:tt MULT factor:ff {:
    System.out.println("Multiplicación detectada: " + tt + " * " + ff);
    RESULT = tt + " * " + ff;
:};

term ::= term:tt DIV factor:ff {:
    System.out.println("División detectada: " + tt + " / " + ff);
    RESULT = tt + " / " + ff;
:};
factor ::= SUB factor:f {:
    System.out.println("Unario: -" + f);
    RESULT = "-" + f;
:};

factor ::= IDENTIFIER:id {:
    System.out.println("Id: " + id);
    RESULT = id;
:};

factor ::= INTEGER_CONSTANT:constant {:
    System.out.println("Integer constant: " + constant);
    RESULT = constant;
:};

factor ::= FLOAT_CONSTANT:constant {:
    System.out.println("Float constant: " + constant);
    RESULT = constant;
:};

factor ::= OPEN_BRACKET expression:e CLOSE_BRACKET {:
    System.out.println("Factor = (Expression) con valor: " + e);
    RESULT = e != null ? "(" + e + ")" : "ERROR"; //  Asegurar que nunca devuelva null
:};






s_write ::=
    WRITE OPEN_BRACKET write_param:wp CLOSE_BRACKET
    {:
        System.out.println("Write statement");
        System.out.println("Write parameter: " + wp);
    :};

write_param ::=
      STRING_CONSTANT:sc
        {: RESULT = sc; :}
    | IDENTIFIER:id
        {: RESULT = id; :};

s_read ::= 
    READ OPEN_BRACKET read_param:rp CLOSE_BRACKET 
    {: 
        System.out.println("Read statement"); 
        System.out.println("Read parameter: " + rp);
    :};
read_param ::= 
    IDENTIFIER:id
        {: RESULT = id; :};


//isZero

is_zero ::= ISZERO OPEN_BRACKET expression:e CLOSE_BRACKET
              {: System.out.println("Condition = isZero(" + e + ")"); :};


//convDate
conv_date ::= CONVDATE OPEN_BRACKET DATE_LITERAL:date CLOSE_BRACKET
{:
    String raw = (String)date;   
    String[] parts = raw.split("-");

    if (parts.length != 3) {
        throw new InvalidDateFormat("Formato de fecha inválido: " + raw);
    }

    int d = Integer.parseInt(parts[0]);
    int m = Integer.parseInt(parts[1]);
    int y = Integer.parseInt(parts[2]);

    try {
        java.time.LocalDate.of(y, m, d);
    } catch (java.time.DateTimeException ex) {
        throw new InvalidDateFormat("Fecha no valida: " + raw);
    } 

    String yyyymmdd = String.format("%04d%02d%02d", y, m, d);
    RESULT = yyyymmdd;
:};